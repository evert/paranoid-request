{"version":3,"sources":["../src/http.js"],"names":["safeConnectionFunc","args","net","_normalizeConnectArgs","arguments","options","s","Socket","newOptions","util","_extend","lookupOpts","addrValidator","wrapperShared","safeLookup","host","err","address","family","lookup","x","destroy","prototype","connect","apply","connectionFunc","safeConnectionWrapper","module","exports","safeModuleWrapper","http"],"mappings":";;AAoBA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AAzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA,SAASA,kBAAT,GAA8B;AAC5B,MAAMC,OAAOC,cAAIC,qBAAJ,CAA0BC,SAA1B,CAAb;AACA,MAAMC,UAAUJ,KAAK,CAAL,CAAhB;AACA,MAAMK,IAAI,IAAIJ,cAAIK,MAAR,CAAeN,KAAK,CAAL,CAAf,CAAV;AACA,MAAMO,aAAaC,eAAKC,OAAL,CAAa,EAAb,EAAiBL,OAAjB,CAAnB;AACA,MAAMM,aAAa,EAACC,eAAeP,QAAQO,aAAxB,EAAnB;AACA;AACAC,2BAAcC,UAAd,CAAyBT,QAAQU,IAAjC,EAAuCJ,UAAvC,EAAmD,UAACK,GAAD,EAAMC,OAAN,EAAeC,MAAf,EAA0B;AAC3E;AACA;AACAV,eAAWO,IAAX,GAAkBE,OAAlB;AACA;AACAT,eAAWW,MAAX,GAAoB,UAACC,CAAD;AAAA,aAAOA,CAAP;AAAA,KAApB;AACAnB,SAAK,CAAL,IAAUO,UAAV;AACA,QAAIQ,GAAJ,EAAS;AACPV,QAAEe,OAAF,CAAUL,GAAV;AACA;AACD;AACD;AACAd,kBAAIK,MAAJ,CAAWe,SAAX,CAAqBC,OAArB,CAA6BC,KAA7B,CAAmClB,CAAnC,EAAsCL,IAAtC;AACD,GAbD;AAcA,SAAOK,CAAP;AACD;;AAED,IAAMmB,iBAAiBZ,yBAAca,qBAAd,CAAoC1B,kBAApC,EAAwD,IAAxD,CAAvB;AACA2B,OAAOC,OAAP,GAAiBf,yBAAcgB,iBAAd,CAAgCC,cAAhC,EAAsCL,cAAtC,CAAjB","file":"http.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport http from 'http';\nimport net from 'net';\nimport util from 'util';\nimport wrapperShared from './_wrapper_shared';\n\n// Use our custom connection function that won't need a synchronous DNS lookup\nfunction safeConnectionFunc() {\n  const args = net._normalizeConnectArgs(arguments);\n  const options = args[0];\n  const s = new net.Socket(args[0]);\n  const newOptions = util._extend({}, options);\n  const lookupOpts = {addrValidator: options.addrValidator};\n  // do a non-blocking lookup to check if this is a safe host to connect to.\n  wrapperShared.safeLookup(options.host, lookupOpts, (err, address, family) => {\n    // Connect to the resolved IP when we call `sock.connect()` to avoid TOCTOU vulns\n    // via DNS rebinding.\n    newOptions.host = address;\n    // No-op, since we should already be dealing with an IP.\n    newOptions.lookup = (x) => x;\n    args[0] = newOptions;\n    if (err) {\n      s.destroy(err);\n      return;\n    }\n    // looks like everything's kosher, we can really connect now.\n    net.Socket.prototype.connect.apply(s, args);\n  });\n  return s;\n}\n\nconst connectionFunc = wrapperShared.safeConnectionWrapper(safeConnectionFunc, true);\nmodule.exports = wrapperShared.safeModuleWrapper(http, connectionFunc);\n"]}