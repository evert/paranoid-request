{"version":3,"sources":["../../src/test/test-utils.js"],"names":["testForErrors","assertResponse","runRequestWithParams","runTest","t","err","params","shouldError","errorMessage","errorName","errorAssertions","equal","assertErrorName","name","assertMessage","assertMessageOutput","RegExp","true","test","message","Object","keys","forEach","val","key","res","statusCode","options","cb","requester","testRequester","paranoid","get","body","config","requestParams","ignoredErr","response","end"],"mappings":"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","file":"test-utils.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport test from 'tape';\nimport paranoid from '../index';\n\nexport function testForErrors(t, err, params) {\n  const {shouldError, errorMessage, errorName, errorAssertions} = params;\n\n  if (!shouldError) {\n    t.equal(err, null, 'Has no request errors');\n    return;\n  }\n\n  const assertErrorName = errorName || 'UnacceptableAddressError';\n  t.equal(err.name, assertErrorName, `Error name is \"${assertErrorName}\"`);\n\n  const assertMessage = errorMessage || 'All addresses were blacklisted!';\n  const assertMessageOutput = `Error message matches \"${assertMessage}\"`;\n  if (assertMessage instanceof RegExp) {\n    t.true(assertMessage.test(err.message), assertMessageOutput);\n  } else {\n    t.equal(err.message, assertMessage, assertMessageOutput);\n  }\n\n  if (errorAssertions) {\n    Object.keys(errorAssertions).forEach(key => {\n      const val = errorAssertions[key];\n\n      t.equal(err[key], val, `Error property ${key} is ${val}.`);\n    });\n  }\n}\n\nexport function assertResponse(params, t, {err, res}) {\n  testForErrors(t, err, params);\n\n  const {statusCode} = params;\n\n  if (statusCode) {\n    t.equal(res.statusCode, statusCode, 'Has expected status code');\n  }\n}\n\nexport function runRequestWithParams(params, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n  }\n\n  const {requester} = options;\n\n  const testRequester = requester || paranoid.get;\n\n  testRequester(params, {}, (err, res, body) => {\n    cb(null, {err, res, body});\n  });\n}\n\nexport function runTest(config) {\n  const {name, requestParams, params} = config;\n\n  test(name, t => {\n    runRequestWithParams(requestParams, params, (ignoredErr, response) => {\n      assertResponse(params, t, response);\n\n      t.end();\n    });\n  });\n}\n"]}