{"version":3,"sources":["../../src/test/legacy-tests.js"],"names":["mock","sinon","net","expects","never","paranoid","get","ignoredErr","res","body","verify","t","end","assert","lookupSpy","spy","dns","options","uri","onFirstGet","lookup","restore","semver","gte","process","version","true","calledOnce","calledTwice","isIP","lastCall","args","sockConnSpy","Socket","prototype","forever","onSecondGet","connect","addrValidator","AddrValidator","portWhitelist","push","client","httpModule","equal","statusCode","destroy","httpsModule","assertUnacceptableAddressError","err","message","name","plan","fail","on"],"mappings":"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","file":"legacy-tests.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* globals process */\n\nimport net from 'net';\nimport dns from 'dns';\nimport sinon from 'sinon';\nimport test from 'tape';\nimport paranoid from '../index';\n\nimport semver from 'semver';\n\ntest('HTTP doesn\\'t hit net.createConnection', t => {\n  const mock = sinon.mock(net);\n  mock.expects('createConnection').never();\n  paranoid.get('http://example.com/', {}, (ignoredErr, res, body) => {\n    mock.verify();\n    t.end();\n  });\n});\n\n// If `dns.lookup()` is called more than once, it's likely that\n// we're not using the resolved address for the actual connection\n// creating a TOCTOU vuln.\ntest('dns.lookup() only called once', function assert(t) {\n  const lookupSpy = sinon.spy(dns, 'lookup');\n  const options = {uri: 'http://example.com/'};\n  paranoid.get(options, function onFirstGet() {\n    dns.lookup.restore();\n    if (semver.gte(process.version, '2.0.0')) {\n      t.true(lookupSpy.calledOnce, 'dns.lookup() called once');\n    } else {\n      // Annoyingly, our manual `socket.connect()` will internally\n      // call `dns.lookup()` on Node < 2.0, but it should be a no-op\n      // with our sanitized IP address.\n      t.true(lookupSpy.calledTwice, 'dns.lookup() called twice');\n      // Make sure the last lookup (for `Socket.connect`) was made with the IP)\n      t.true(net.isIP(lookupSpy.lastCall.args[0]), 'second dns.lookup() called with IP');\n    }\n\n    t.end();\n  });\n});\n\nif (semver.gte(process.version, '0.11.0')) {\n  test('Paranoid agents can pool connections', function assert(t) {\n    const sockConnSpy = sinon.spy(net.Socket.prototype, 'connect');\n    const options = {uri: 'http://example.com/', forever: true};\n    paranoid.get(options, function onFirstGet() {\n      paranoid.get(options, function onSecondGet() {\n        net.Socket.prototype.connect.restore();\n        t.true(sockConnSpy.calledOnce, 'Socket.connect called once');\n        t.end();\n      });\n    });\n  });\n\n  test('Paranoid connection pool splits on validator rules', function assert(t) {\n    const addrValidator = new paranoid.AddrValidator({portWhitelist: [80, 8001]});\n    const sockConnSpy = sinon.spy(net.Socket.prototype, 'connect');\n    const options = {uri: 'http://example.com/', forever: true, addrValidator};\n    paranoid.get(options, function onFirstGet() {\n      addrValidator.portWhitelist.push(9001);\n      paranoid.get(options, function onSecondGet() {\n        net.Socket.prototype.connect.restore();\n        t.true(sockConnSpy.calledTwice, 'Socket.connect called twice');\n        t.end();\n      });\n    });\n  });\n} else {\n  // Node 0.10 won't use our safe agent if `forever: true` is\n  // used, make sure we don't pool connections there.\n  test('Paranoid agents don\\'t pool connections', function assert(t) {\n    const sockConnSpy = sinon.spy(net.Socket.prototype, 'connect');\n    const options = {uri: 'http://example.com/', forever: true};\n    paranoid.get(options, function onFirstGet() {\n      paranoid.get(options, function onSecondGet() {\n        net.Socket.prototype.connect.restore();\n        t.true(sockConnSpy.calledTwice, 'Socket.connect called twice');\n        t.end();\n      });\n    });\n  });\n}\n\n// //////\n// HTTP module wrapper tests\n// //////\n\ntest('Normal hostname HTTP module', t => {\n  const client = paranoid.httpModule.get('http://example.com/', res => {\n    t.equal(res.statusCode, 200);\n    // Necessary or Node 0.10.x will keep the connections open forever\n    // and hang the tests. neat.\n    client.destroy();\n    t.end();\n  });\n});\n\ntest('Normal hostname HTTPS module', t => {\n  const client = paranoid.httpsModule.get('https://example.com/', res => {\n    t.equal(res.statusCode, 200);\n    client.destroy();\n    t.end();\n  });\n});\n\nfunction assertUnacceptableAddressError(t, err) {\n  t.equal(err.message, 'All addresses were blacklisted!', 'Has blacklisted error.');\n  t.equal(err.name, 'UnacceptableAddressError', 'Has UnacceptableAddressError error name.');\n}\n\ntest('Blacklisted hostname HTTP module', t => {\n  t.plan(2);\n  const client = paranoid.httpModule.get('http://localhost/', res => {\n    t.fail('Got a response');\n    client.destroy();\n  }).on('error', err => {\n    assertUnacceptableAddressError(t, err);\n    client.destroy();\n  });\n});\n\ntest('Blacklisted hostname HTTPS module', t => {\n  t.plan(2);\n  const client = paranoid.httpsModule.get('https://localhost/', res => {\n    t.fail('Got a response');\n    client.destroy();\n  }).on('error', err => {\n    assertUnacceptableAddressError(t, err);\n    client.destroy();\n  });\n});\n"]}