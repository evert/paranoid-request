{"version":3,"sources":["../../src/test/integration.js"],"names":["badDomain","params","connectionRefused","withOriginalRequest","badTest","badDomainTest","badUnixSocketTest","errorMessage","badPortTest","goodTest","originalRequestSuccess","failToConnectToLocalhost","originalRequestMessage","tests","requester","paranoid","forEach","runTest"],"mappings":";;AAoBA;;;;AACA;;AACA;;;;IAGEA,S,GAGEC,kB,CAHFD,S;IACAE,iB,GAEED,kB,CAFFC,iB;IACAC,mB,GACEF,kB,CADFE,mB,EA3BF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA,IAAMC,UAAU,+BAAhB;;AAEA,IAAMC,gBAAgB,8BAAaL,SAAb,CAAtB;AACA,IAAMM,oBAAoB,8BAAa;AACrCC,gBAAc;AADuB,CAAb,CAA1B;AAGA,IAAMC,cAAc,8BAAa;AAC/BD,gBAAc;AADiB,CAAb,CAApB;;AAIA,IAAME,WAAW,gCAAjB;;AAEA,IAAMC,yBAAyB,+BAAcP,mBAAd,CAA/B;;AAEA,IAAMQ,2BAA2B,8BAAaR,mBAAb,EAAkCD,iBAAlC,CAAjC;;AAEA,IAAMU,yBAAyB,uCAA/B;;AAEA,IAAMC,QAAQ,CACZJ,SAAS,iCAAT,EAA4C,qBAA5C,CADY,EAEZA,SAAS,kCAAT,EAA6C,sBAA7C,CAFY,EAIZL,QAAQ,sCAAR,EAAgD,mBAAhD,CAJY,EAKZA,QAAQ,uCAAR,EAAiD,oBAAjD,CALY;;AAOZ;AACAA,QAAQ,gCAAR,EAA0C,mBAA1C,CARY,EASZA,QAAQ,iCAAR,EAA2C,oBAA3C,CATY,EAWZE,kBACE,2BADF,EAEE,yDAFF,CAXY,EAeZA,kBACE,iCADF,EAEE,0DAFF,CAfY,EAmBZA,kBACE,0CADF,EAEE,6FAFF,CAnBY,EAwBZF,QACE,gDADF,EAEE,uDAFF,CAxBY,EA4BZI,YACE,oCADF,EAEE,0BAFF,CA5BY,EAgCZA,YACE,0CADF,EAEE,2BAFF,CAhCY,EAqCZH,cAAc,4CAAd,EAA4D,kCAA5D,CArCY,EAuCZI,SAAS,+BAAT,EAA0C,qBAA1C,EAAiE,EAACK,WAAWC,eAAZ,EAAjE,CAvCY,EAyCZJ,yBAA4BC,sBAA5B,eAA8D,sBAA9D,CAzCY,EA0CZD,yBAA4BC,sBAA5B,cAA6D,qBAA7D,CA1CY,EA4CZF,uBAA0BE,sBAA1B,qBAAkE,qBAAlE,CA5CY,CAAd;;AA+CAC,MAAMG,OAAN,CAAcC,kBAAd;;AAEA;AACA","file":"integration.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport paranoid from '../index';\nimport {runTest} from './test-utils';\nimport {setupBadTest, setupGoodTest, params} from './test-params';\n\nconst {\n  badDomain,\n  connectionRefused,\n  withOriginalRequest\n} = params;\n\nconst badTest = setupBadTest();\n\nconst badDomainTest = setupBadTest(badDomain);\nconst badUnixSocketTest = setupBadTest({\n  errorMessage: 'UNIX domain sockets are not allowed'\n});\nconst badPortTest = setupBadTest({\n  errorMessage: 'Disallowed port detected'\n});\n\nconst goodTest = setupGoodTest();\n\nconst originalRequestSuccess = setupGoodTest(withOriginalRequest);\n\nconst failToConnectToLocalhost = setupBadTest(withOriginalRequest, connectionRefused);\n\nconst originalRequestMessage = 'Original requests module is untouched';\n\nconst tests = [\n  goodTest('Normal hostname HTTP connection', 'http://example.com/'),\n  goodTest('Normal hostname HTTPS connection', 'https://example.com/'),\n\n  badTest('Blacklisted hostname HTTP connection', 'http://localhost/'),\n  badTest('Blacklisted hostname HTTPS connection', 'https://localhost/'),\n\n  // This is the reason you can't use `options.lookup`, even with the HTTP module.\n  badTest('Blacklisted IP HTTP connection', 'http://127.0.0.1/'),\n  badTest('Blacklisted IP HTTPS connection', 'https://127.0.0.1/'),\n\n  badUnixSocketTest(\n    'Domain sockets disallowed',\n    'http://unix:/absolute/path/to/unix.socket:/request/path'\n  ),\n  badUnixSocketTest(\n    'Domain sockets disallowed HTTPS',\n    'https://unix:/absolute/path/to/unix.socket:/request/path'\n  ),\n  badUnixSocketTest(\n    'Domain sockets after redirect disallowed',\n    'https://httpbin.org/redirect-to?url=http://unix:/absolute/path/to/unix.socket:/request/path'\n  ),\n\n  badTest(\n    'Blacklisted hostname after redirect disallowed',\n    'https://httpbin.org/redirect-to?url=http://localhost/'\n  ),\n  badPortTest(\n    'Use safe port whitelist by default',\n    'http://example.com:9999/'\n  ),\n  badPortTest(\n    'Use safe port whitelist by default HTTPS',\n    'https://example.com:9999/'\n  ),\n\n  badDomainTest('Non-existent domain != UnacceptableAddress', 'https://foozybarbaz.example.com/'),\n\n  goodTest('Module-as-function call works', 'http://example.com/', {requester: paranoid}),\n\n  failToConnectToLocalhost(`${originalRequestMessage} (https)`, 'https://127.0.0.1:1/'),\n  failToConnectToLocalhost(`${originalRequestMessage} (http)`, 'http://127.0.0.1:1/'),\n\n  originalRequestSuccess(`${originalRequestMessage} (example.com)`, 'http://example.com/')\n];\n\ntests.forEach(runTest);\n\n// TODO: how do we test that we didn't subtly mess up HTTPS?\n// Are there well-known sites for testing CommonName mismatches and self-signed certs?\n"]}