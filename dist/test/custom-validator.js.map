{"version":3,"sources":["../../src/test/custom-validator.js"],"names":["baseBadParams","params","baseGoodParams","badUri","notFound","exampleComIp","exampleComCIDR","exampleComIpURL","runCustomValidatorTest","testParams","name","runTest","t","plan","async","series","goodResults","runRequestWithParams","bind","badResults","uri","endTest","err","notOk","end","addrValidator","paranoid","AddrValidator","ipBlacklist","requester","defaults","get"],"mappings":";;AAoBA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IASOA,a,GAAmDC,kB,CAAnDD,a;IAAeE,c,GAAoCD,kB,CAApCC,c;IAAgBC,M,GAAoBF,kB,CAApBE,M;IAAQC,Q,GAAYH,kB,CAAZG,Q;;AAE9C;;AACA,IAAMC,eAAe,eAArB;AACA,IAAMC,iBAAoBD,YAApB,QAAN;AACA,IAAME,8BAA4BF,YAA5B,MAAN;;AAEA,SAASG,sBAAT,CAAgCC,UAAhC,EAA4C;AAAA,MACnCC,IADmC,GAC3BD,UAD2B,CACnCC,IADmC;;;AAG1C,sBAAKA,IAAL,EAAW,SAASC,OAAT,CAAiBC,CAAjB,EAAoB;AAC7BA,MAAEC,IAAF,CAAO,CAAP;;AAEAC,oBAAMC,MAAN,CAAa;AACXC,mBAAaC,gCAAqBC,IAArB,CAA0B,IAA1B,EAAgCX,eAAhC,CADF;AAEXY,kBAAYF,gCAAqBC,IAArB,CAA0B,IAA1B,EAAgC,qBAAO,EAACE,KAAKb,eAAN,EAAP,EAA+BE,UAA/B,CAAhC;AAFD,KAAb,EAGG,SAASY,OAAT,CAAiBC,GAAjB,QAAiD;AAAA,UAA1BN,WAA0B,QAA1BA,WAA0B;AAAA,UAAbG,UAAa,QAAbA,UAAa;;;AAElDP,QAAEW,KAAF,CAAQD,GAAR,EAAa,qBAAb;;AAEA,qCAAe,qBAAOpB,cAAP,EAAuBE,QAAvB,CAAf,EAAiDQ,CAAjD,EAAoDI,WAApD;;AAEA,qCAAe,qBAAOhB,aAAP,EAAsBG,MAAtB,CAAf,EAA8CS,CAA9C,EAAiDO,UAAjD;;AAEAP,QAAEY,GAAF;AACD,KAZD;AAaD,GAhBD;AAiBD;;AAED,IAAMC,gBAAgB,IAAIC,gBAASC,aAAb,CAA2B,EAACC,aAAa,CAACtB,cAAD,CAAd,EAA3B,CAAtB;;AAEAE,uBAAuB;AACrBE,QAAM,yCADe;AAErBe;AAFqB,CAAvB;;AAKA;AACAjB,uBAAuB;AACrBE,QAAM,0CADe;AAErBmB,aAAWH,gBAASI,QAAT,CAAkB,EAACL,4BAAD,EAAlB,EAAmCM;AAFzB,CAAvB","file":"custom-validator.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport async from 'async';\nimport extend from 'xtend';\nimport test from 'tape';\nimport paranoid from '../index';\nimport {assertResponse, runRequestWithParams} from './test-utils';\nimport {params} from './test-params';\n\nconst {baseBadParams, baseGoodParams, badUri, notFound} = params;\n\n// example.com's IP\nconst exampleComIp = '93.184.216.34';\nconst exampleComCIDR = `${exampleComIp}/32`;\nconst exampleComIpURL = `http://${exampleComIp}/`;\n\nfunction runCustomValidatorTest(testParams) {\n  const {name} = testParams;\n\n  test(name, function runTest(t) {\n    t.plan(5);\n\n    async.series({\n      goodResults: runRequestWithParams.bind(null, exampleComIpURL),\n      badResults: runRequestWithParams.bind(null, extend({uri: exampleComIpURL}, testParams))\n    }, function endTest(err, {goodResults, badResults}) {\n\n      t.notOk(err, 'does not have error');\n\n      assertResponse(extend(baseGoodParams, notFound), t, goodResults);\n\n      assertResponse(extend(baseBadParams, badUri), t, badResults);\n\n      t.end();\n    });\n  });\n}\n\nconst addrValidator = new paranoid.AddrValidator({ipBlacklist: [exampleComCIDR]});\n\nrunCustomValidatorTest({\n  name: 'Custom AddrValidator works with request',\n  addrValidator\n});\n\n// Same as above, but with a wrapper instead of explicitly passing `addrValidator`\nrunCustomValidatorTest({\n  name: 'Custom AddrValidator wrapper for request',\n  requester: paranoid.defaults({addrValidator}).get\n});\n"]}