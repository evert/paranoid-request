{"version":3,"sources":["../src/addr_validator.js"],"names":["privateCIDRs","map","ip","cidrSubnet","AddrValidator","options","portBlacklist","length","portWhitelist","Error","undefined","DEFAULT_PORT_WHITELIST","slice","ipBlacklist","maybeParseCIDR","ipWhitelist","address","isV4Format","whitelisted","some","cidr","contains","concat","port","indexOf","ipAddr","prototype","module","exports"],"mappings":";;qjBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAEA;AACA;AACA,IAAMA,eAAe,CACnB,WADmB,EAEnB,YAFmB,EAGnB,eAHmB,EAInB,aAJmB,EAKnB,gBALmB,EAMnB,eANmB,EAOnB,cAPmB,EAQnB,gBARmB,EASnB,cATmB,EAUnB,gBAVmB,EAWnB,gBAXmB,EAYnB,eAZmB,EAanB,iBAbmB,EAcnB,gBAdmB,EAenB,aAfmB,EAgBnB,aAhBmB,EAiBnB,oBAjBmB,EAkBnBC,GAlBmB,CAkBfC,aAAGC,UAlBY,CAArB;;IAoBMC,a;AACJ,2BAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxB,QAAIA,QAAQC,aAAR,IAAyBD,QAAQC,aAAR,CAAsBC,MAA/C,IACFF,QAAQG,aADN,IACuBH,QAAQG,aAAR,CAAsBD,MADjD,EACyD;AACvD,YAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,QAAIJ,QAAQG,aAAR,KAA0BE,SAA9B,EAAyC;AACvCL,cAAQG,aAAR,GAAwB,KAAKG,sBAAL,CAA4BC,KAA5B,EAAxB;AACD;;AAED,SAAKC,WAAL,GAAmB,CAACR,QAAQQ,WAAR,IAAuB,EAAxB,EAA4BZ,GAA5B,CAAgCa,cAAhC,CAAnB;AACA,SAAKC,WAAL,GAAmB,CAACV,QAAQU,WAAR,IAAuB,EAAxB,EAA4Bd,GAA5B,CAAgCa,cAAhC,CAAnB;AACA,SAAKR,aAAL,GAAsBD,QAAQC,aAAR,IAAyB,EAA/C;AACA,SAAKE,aAAL,GAAsBH,QAAQG,aAAR,IAAyB,EAA/C;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;;6BAEQQ,O,EAAS;AAChB;AACA,UAAI,CAACA,OAAD,IAAY,CAACd,aAAGe,UAAH,CAAcD,OAAd,CAAjB,EAAyC;AACvC,eAAO,KAAP;AACD;;AAED;AACA,UAAME,cAAc,KAAKH,WAAL,CAAiBI,IAAjB,CAAsB;AAAA,eAAQC,KAAKC,QAAL,CAAcL,OAAd,CAAR;AAAA,OAAtB,CAApB;AACA,UAAIE,WAAJ,EAAiB;AACf,eAAO,IAAP;AACD;;AAED;AACA,aAAO,CAAClB,aAAasB,MAAb,CAAoB,KAAKT,WAAzB,EAAsCM,IAAtC,CAA2C;AAAA,eAAQC,KAAKC,QAAL,CAAcL,OAAd,CAAR;AAAA,OAA3C,CAAR;AACD;;;+BAEUO,I,EAAM;AACf,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAO,KAAP;AACD,OAFD,MAEO,IAAIA,OAAO,KAAP,IAAgBA,OAAO,CAA3B,EAA8B;AACnC,eAAO,KAAP;AACD,OAFM,MAEA,IAAI,KAAKf,aAAL,CAAmBD,MAAvB,EAA+B;AACpC,eAAO,KAAKC,aAAL,CAAmBgB,OAAnB,CAA2BD,IAA3B,MAAqC,CAAC,CAA7C;AACD,OAFM,MAEA,IAAI,KAAKjB,aAAL,CAAmBC,MAAvB,EAA+B;AACpC,eAAO,KAAKD,aAAL,CAAmBkB,OAAnB,CAA2BD,IAA3B,MAAqC,CAAC,CAA7C;AACD;AACD,aAAO,IAAP;AACD;;;;;;AAGH,SAAST,cAAT,CAAwBW,MAAxB,EAAgC;AAC9B,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOvB,aAAGC,UAAH,CAAcsB,MAAd,CAAP;AACD;;AAED,SAAOA,MAAP;AACD;;AAED;AACArB,cAAcsB,SAAd,CAAwBf,sBAAxB,GAAiD,CAAC,EAAD,EAAK,IAAL,EAAW,GAAX,EAAgB,IAAhB,EAAsB,IAAtB,CAAjD;;AAEAgB,OAAOC,OAAP,GAAiBxB,aAAjB","file":"addr_validator.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport ip from 'ip';\n\n// `ip.isPrivate()` is pretty jank, let's use our own list of \"private\" CIDRs\n// Mix of addresses from ipaddress.py and SafeCurl, thank ya @fin1te!\nconst privateCIDRs = [\n  '0.0.0.0/8',\n  '10.0.0.0/8',\n  '100.64.0.0/10',\n  '127.0.0.0/8',\n  '169.254.0.0/16',\n  '172.16.0.0/12',\n  '192.0.0.0/29',\n  '192.0.0.170/31',\n  '192.0.2.0/24',\n  '192.88.99.0/24',\n  '192.168.0.0/16',\n  '198.18.0.0/15',\n  '198.51.100.0/24',\n  '203.0.113.0/24',\n  '224.0.0.0/4',\n  '240.0.0.0/4',\n  '255.255.255.255/32'\n].map(ip.cidrSubnet);\n\nclass AddrValidator {\n  constructor(options = {}) {\n    if (options.portBlacklist && options.portBlacklist.length &&\n      options.portWhitelist && options.portWhitelist.length) {\n      throw new Error('Only support port whitelist or blacklist, not both!');\n    }\n\n    if (options.portWhitelist === undefined) {\n      options.portWhitelist = this.DEFAULT_PORT_WHITELIST.slice();\n    }\n\n    this.ipBlacklist = (options.ipBlacklist || []).map(maybeParseCIDR);\n    this.ipWhitelist = (options.ipWhitelist || []).map(maybeParseCIDR);\n    this.portBlacklist = (options.portBlacklist || []);\n    this.portWhitelist = (options.portWhitelist || []);\n    // Maybe later.\n    // if (options.autodetectLocalAddresses === undefined) {\n    //   this.autodetectLocalAddresses = true;\n    // } else {\n    //   this.autodetectLocalAddresses = options.autodetectLocalAddresses;\n    // }\n  }\n\n  isSafeIP(address) {\n    // IPv6 get out.\n    if (!address || !ip.isV4Format(address)) {\n      return false;\n    }\n\n    // The whitelist can be used to punch holes in the blacklist\n    const whitelisted = this.ipWhitelist.some(cidr => cidr.contains(address));\n    if (whitelisted) {\n      return true;\n    }\n\n    // Return any private or specifically blacklisted IPs\n    return !privateCIDRs.concat(this.ipBlacklist).some(cidr => cidr.contains(address));\n  }\n\n  isSafePort(port) {\n    if (typeof port !== 'number') {\n      return false;\n    } else if (port > 65535 || port < 1) {\n      return false;\n    } else if (this.portWhitelist.length) {\n      return this.portWhitelist.indexOf(port) !== -1;\n    } else if (this.portBlacklist.length) {\n      return this.portBlacklist.indexOf(port) === -1;\n    }\n    return true;\n  }\n}\n\nfunction maybeParseCIDR(ipAddr) {\n  if (typeof ipAddr === 'string') {\n    return ip.cidrSubnet(ipAddr);\n  }\n\n  return ipAddr;\n}\n\n// An assortment of common HTTPS? ports.\nAddrValidator.prototype.DEFAULT_PORT_WHITELIST = [80, 8080, 443, 8443, 8000];\n\nmodule.exports = AddrValidator;\n"]}